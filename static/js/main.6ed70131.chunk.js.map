{"version":3,"sources":["components/data.js","components/Button.js","components/Display.js","App.js","serviceWorker.js","index.js"],"names":["digits","value","id","operation","Button","props","onClick","e","operate","target","updateValue","Display","className","result","toString","currentValue","operando","App","useState","setCurrentValue","setOperando","operador","setOperador","setResult","val","calculate","clearDisplay","length","operationResult","parseFloat","value1","value2","includes","updatedValue","charAt","slice","map","digit","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6ed70131.chunk.js","sourcesContent":["const digits = [\n    {\n        value: \"AC\",\n        id: \"clear\",\n        operation: true\n      },\n      {\n        value: \"/\",\n        id: \"divide\",\n        operation: true\n      },\n      {\n        value: \"*\",\n        id: \"multiply\",\n        operation: true\n      },\n      {\n        value: \"7\",\n        id: \"seven\",\n        operation: false\n      },\n      {\n        value: \"8\",\n        id: \"eight\",\n        operation: false\n      },\n      {\n        value: \"9\",\n        id: \"nine\",\n        operation: false\n      },\n      {\n        value: \"-\",\n        id: \"subtract\",\n        operation: true\n      },\n      {\n        value: \"4\",\n        id: \"four\",\n        operation: false\n      },\n      {\n        value: \"5\",\n        id: \"five\",\n        operation: false\n      },\n      {\n        value: \"6\",\n        id: \"six\",\n        operation: false\n      },\n      {\n        value: \"+\",\n        id: \"add\",\n        operation: true\n      },\n      {\n        value: \"1\",\n        id: \"one\",\n        operation: false\n      },\n      {\n        value: \"2\",\n        id: \"two\",\n        operation: false\n      },\n      {\n        value: \"3\",\n        id: \"three\",\n        operation: false\n      },\n      {\n        value: \"=\",\n        id: \"equals\",\n        operation: true\n      },\n      {\n        value: \"0\",\n        id: \"zero\",\n        operation: false\n      },\n      {\n        value: \".\",\n        id: \"decimal\",\n        operation: false\n      }\n];\n\nexport default digits;","import React from 'react'\n\nconst Button = (props) =>{\n    const handleClick = (e) =>{\n        if(props.operation){\n            props.operate(e.target.value)\n            \n        } else {\n            props.updateValue(e.target.value)\n        }\n    }\n    return(\n        <button id={props.id} value={props.value} onClick={handleClick} >{props.value}</button>\n    )\n}\n\n\n\nexport default Button","import React from \"react\";\n\nconst Display = (props) =>{\n    const changeDispayField = () => {\n        if (props.result.toString()) {\n          return props.result;\n        } else if (props.currentValue.toString()) {\n          return props.currentValue;\n        } else if (props.operando.toString()) {\n          return props.operando;\n        } else {\n          return \"0\";\n        }\n      };\n\n    return(\n        <div className=\"Display\" id=\"display\">{changeDispayField()}</div>\n    )\n}\n\nexport default Display","import React, {useState} from 'react';\nimport './App.css';\nimport digits from './components/data'\nimport Button from './components/Button'\nimport Display from './components/Display';\n\n\nfunction App() {\n  const [currentValue, setCurrentValue] = useState(\"\");\n  const [operando, setOperando] = useState('');\n  const [operador, setOperador] = useState('')\n  const [result, setResult] = useState('');\n\n\n  const operate = (val) => {\n    if (val === '='){\n      calculate();\n    } else if (val === 'AC'){\n      clearDisplay()\n    } else if (val === '-' && currentValue.length=== 0){\n      setCurrentValue(val + currentValue)\n    } else if(currentValue === '-' && operando){\n      setOperador(val);\n      setCurrentValue('')\n    }\n    else{\n      setOperador(val);\n      calculate()\n    }\n  };\n\n\n  const calculate = () => {\n    if(currentValue && operando){\n      let [value1, value2] = [parseFloat(currentValue), parseFloat(operando)];\n      let operationResult;\n\n      switch (operador) {\n        case '+':\n          operationResult = value1 + value2;\n          break\n        case '-':\n          operationResult = value2 - value1;\n          break\n        case '*':\n          operationResult = value1 * value2;\n          break\n        case '/':\n          operationResult = value2 / value1;\n          break\n        default:\n          return;\n      }\n\n      setCurrentValue('');\n      setResult(operationResult);\n      setOperando(operationResult);\n    } else if (currentValue === '-') {\n      setOperando('');\n\n    } else if (currentValue){\n      setOperando(currentValue);\n      setCurrentValue('');\n    }\n  };\n\n  const clearDisplay = () => {\n    setResult('');\n    setOperando('');\n    setCurrentValue('');\n    setOperador('')\n  }\n\n  const updateValue = (val) =>{\n    if (val === '.' && currentValue.includes('.')){\n      setCurrentValue(currentValue)\n    } else{\n      let updatedValue = currentValue + val;\n      if(updatedValue.charAt(0) === '0'){\n      updatedValue= updatedValue.slice(1)\n      }\n    \n      setCurrentValue(updatedValue)}\n  }\n\n  return (\n    <div className=\"App\">\n      <Display \n        currentValue={currentValue}\n        result={result}\n        operador={operador}\n        operando={operando}\n      />\n\n      <div className=\"calculator\">\n        {digits.map((digit) => { \n          return(\n            <Button \n              id={digit.id}\n              value={digit.value}\n              operation={digit.operation}\n              updateValue={updateValue}\n              operate={operate}\n              /> \n        )})}\n      </div>\n\n      \n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}